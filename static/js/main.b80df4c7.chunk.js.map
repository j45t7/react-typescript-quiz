{"version":3,"sources":["API.tsx","components/QuestionCard.styles.tsx","components/QuestionCard.tsx","utils.tsx","images/horses.jpeg","App.styles.tsx","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTriva","EASY","newQuestions","length","undefined","event","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b80df4c7.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport type QuestionsState = Question & { answers: string[] };\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&category=27&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n  }))\n};","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  min-width: 300px;\n  background: #FCF0C8;\n  border-radius: 10px;\n  border: 1px solid #F7F6F2;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  margin-bottom: 3rem;\n\np {\n  font-size: 1.5rem;\n}\n`\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n}\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 1rem;\n    height: 40px;\n    margin: 5px 0;\n    width: 100%;\n    background: ${({ correct, userClicked }) =>\n      correct ?\n        'linear-gradient(90deg, #50CB93, #59bc86)'\n        : !correct && userClicked ? 'linear-gradient(90deg, #ff5656, #c16868)'\n        : 'linear-gradient(90deg, #ED8E7C, #F5C6AA)'\n      };\n    border: 1px solid #fff;\n    box-shadow: 1px 2px 0 rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n  }\n`","import React from 'react'\nimport { AnswerObject } from '../App'\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles'\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNumber: number;\n  totalQuestions: number;\n}\nexport const QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNumber,\n  totalQuestions\n}) => {\n  return (\n    <Wrapper>\n      <p className=\"number\">\n        Question: {questionNumber} / {totalQuestions}\n      </p>\n      <p dangerouslySetInnerHTML={{__html: question}} />\n      <div>\n        {answers.map(answer => (\n          <ButtonWrapper\n            key={answer}\n            correct={userAnswer?.correctAnswer === answer}\n            userClicked={userAnswer?.answer === answer}\n            >\n            <button disabled={!!userAnswer} value={answer} onClick={callback}>\n              <span dangerouslySetInnerHTML={{__html: answer}} />\n            </button>\n          </ButtonWrapper>\n        ))}\n      </div>\n    </Wrapper>\n  )\n}\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5)\n\n","export default __webpack_public_path__ + \"static/media/horses.efb132de.jpeg\";","import styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './images/horses.jpeg'\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height:100%;\n    display:block;\n  }\n\n  body {\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0;\n    display: flex;\n    padding: 0 20px;\n    justify-content: center;\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: 'Lato', sans-serif;\n  }\n`\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > p {\n    color: #fff;\n  }\n\n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin-bottom: 0 0 1rem;\n  }\n\n  h1 {\n    font-family: 'Lato' sans-serif;\n    background-size: 100%;\n    font-weight: 400;\n    font-size: 70px;\n    text-align: center;\n    margin: 3rem 2rem;\n\n  }\n\n  .start, .next {\n    cursor: pointer;\n    border: 2px solid #630A10;\n    background-color: #911F27;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n    color: #fff;\n    box-shadow: rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px;\n    transition: all 300ms ease;\n    border-radius: 20px;\n  }\n\n  .start:hover, .next:hover {\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 30px 60px -12px inset,\n    rgba(0, 0, 0, 0.3) 0px 18px 36px -18px inset;\n  }\n\n  .start {\n    max-width:  200px;\n  }\n`","import React, { useState } from 'react';\nimport { QuestionCard } from './components/QuestionCard';\nimport { fetchQuizQuestions } from './API'\n//Types\nimport { QuestionsState, Difficulty } from './API'\n//Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\nconst TOTAL_QUESTIONS = 10\n\nconst App = () =>  {\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionsState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score, setScore] = useState(0)\n  const [gameOver, setGameOver] = useState(true)\n\n  console.log(questions)\n\n  const startTriva = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    )\n\n    setQuestions(newQuestions)\n    setScore(0)\n    setUserAnswers([])\n    setNumber(0)\n    setLoading(false)\n    //todo: error handling\n\n  }\n\n  const checkAnswer = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if(!gameOver){\n      //users answer\n      const answer = event.currentTarget.value;\n      //check answer agains corect answet\n      const correct = questions[number].correct_answer === answer;\n      //add score\n      if(correct) setScore(prev => prev + 1)\n      //save answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      }\n      setUserAnswers((prev) => [...prev, answerObject])\n    }\n  }\n\n  const nextQuestion = () => {\n    //next question\n    const nextQuestion = number + 1;\n\n    if(nextQuestion === TOTAL_QUESTIONS){\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n      <h1>React Quiz</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className='start' onClick={startTriva}>Start</button>\n      ) : null}\n      {!gameOver && <p className=\"score\">Score: {score}</p>}\n      {loading && <p>Loading Questions...</p> }\n      {!loading && !gameOver && (\n        <QuestionCard\n          questionNumber={number+1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />\n      )}\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n      <button className='next' onClick={nextQuestion}>Next Question</button>\n      ) : null }\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}